*** CAUTION : This is only tested and known to work on Linux systems 

Overview:
---------------

This is a tool for testing the X86 semantics and parser. It consists of two
parts: a tracer (gntrace, memlist) and simulators (test.native). 

The tracer runs a binary and uses Intel's Pin instrumentation tool to record
the values of various regisers and memory locations as the program runs and
then outputs them in "mem0.txt", "mem1.txt", and "regs.txt". The tracer stops
the program after a certain number of instructions have been executed or a
pre-defined stop symbol is reached.

The memory values/addresses stored in the mem.txt files  are addresses
containing instructions that were decoded and any other memory addresses
accessed while the program was being traced (ie: memory operands). 

The simulator then reads in the memory dump and copies the initial set of
register values. It then steps through instruction by instruction, comparing
the register values it gets with the ones in the file. 

Requirements:
--------------

You need Intel's Pin analysis tool. It's pretty cool. Available from:
http://www.pintool.org/

The simulator part requires ocamlbuild. I've only tested it on Ocaml 3.10+.


Usage:
--------------

First, you need to export $PIN_PATH in your bash environment, and it should
point to the top level of the pin tool.

To build, first go to the simulator/ directory and do "make extraction". This
extracts the Coq code to Ocaml and sets everything up.  Then run "make" in the
semantics_trace/ directory. This runs the make files in tracer/ and simulator/
and then copies the resulting binaries to the toplevel. 

To generate a trace of a C program called "test.c" do:
> ./run.sh test.c <SYMBOL NAME TO STOP TRACING AT"

If everything works, this will output "mem0.txt", "mem1.txt", and "regs0.txt".
(If your program contained system calls there will be additional memX files
warning - this feature of the tracer is not as well tested). There will also be
a file called memaddrs.txt which is used by the tracer in an intermediary step.

Now, to load the simulator run

> ./test.native "mem0.txt" "regs.txt" "mem1.txt"

These will output the simulator's register values after each instruction (in a
format similar to regs.txt). If at some point the register values do not match
the corresponding values in regs.txt or the "Failed" state is reached in the
simulator, it stops. If all of the register values match, it does a diff of 
memory in the simulator against the memory values listed in mem1.txt.
